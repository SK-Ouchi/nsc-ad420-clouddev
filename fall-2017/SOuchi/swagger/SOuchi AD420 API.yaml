swagger: '2.0'
info:
  description: This is a test for SKOuchi's AD420 class
  version: 1.0.0
  title: AD420 API Skouchi
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: petstore.swagger.io
basePath: /v2
tags:
  - name: AD420
    description: First API created by SKOuchi
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: store
    description: API Access AD420
  - name: user
    description: Operations about user
    externalDocs:
      description: N/A
      url: 'http://swagger.io'
schemes:
  - http
paths:
  /user:
    post:
      tags:
        - user
      summary: Create a new user
      description: Add a user
      operationId: addUser
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: User needs to be added
          required: true
          schema:
            $ref: '#/definitions/user'
      responses:
        '405':
          description: Invalid input
    put:
      tags:
        - user
      summary: Update an existing user
      description: ''
      operationId: updateUser
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: User object
          required: true
          schema:
            $ref: '#/definitions/user'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
        '405':
          description: Validation exception
  '/user/{userId}':
    get:
      tags:
        - user
      summary: Find user by ID
      description: Returns a single user
      operationId: getuserById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/user'
        '400':
          description: Invalid ID supplied
        '404':
          description: user not found
    post:
      tags:
        - user
      summary: Updates a user with form data
      description: ''
      operationId: updateUserWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user that needs to be updated
          required: true
          type: integer
          format: int64
        - name: username
          in: formData
          description: Updated username of the user
          required: false
          type: string
        - name: firstname
          in: formData
          description: Updated firstname of the user
          required: false
          type: string
        - name: lastname
          in: formData
          description: Updated lastname of the user
          required: false
          type: string
      responses:
        '405':
          description: Invalid input
    delete:
      tags:
        - user
      summary: Deletes a user
      description: ''
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: userId
          in: path
          description: User id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
  /task:
    post:
      tags:
        - task
      summary: Create a new task
      description: Add a task
      operationId: addTask
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Task needs to be added
          required: true
          schema:
            $ref: '#/definitions/task'
      responses:
        '405':
          description: Invalid input
    put:
      tags:
        - task
      summary: Update an existing task
      description: ''
      operationId: updateTask
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Task object
          required: true
          schema:
            $ref: '#/definitions/task'
      responses:
        '400':
          description: Invalid task
        '404':
          description: Task not found
        '405':
          description: Validation exception
  '/task/{taskId}':
    get:
      tags:
        - task
      summary: Find task by ID
      description: Returns a single task
      operationId: gettaskById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: taskId
          in: path
          description: ID of task to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/task'
        '400':
          description: Invalid ID supplied
        '404':
          description: task not found
    post:
      tags:
        - task
      summary: Updates a task with form data
      description: ''
      operationId: updateTaskWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: taskId
          in: path
          description: ID of task that needs to be updated
          required: true
          type: integer
          format: int64
        - name: discription
          in: formData
          description: Updated discription of the user
          required: false
          type: string
      responses:
        '405':
          description: Invalid input
    delete:
      tags:
        - task
      summary: Deletes a task
      description: ''
      operationId: deletetask
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: taskId
          in: path
          description: Task id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
  /user/task:
    post:
      tags:
        - user
      summary: Place a task for a user
      description: ''
      operationId: placeTask
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: task placed for user
          required: true
          schema:
            $ref: '#/definitions/task'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/task'
        '400':
          description: Invalid task
  '/user/task/{taskId}':
    get:
      tags:
        - user
      summary: Find user user by taskID
      description: ''
      operationId: getUserByTaskId
      produces:
        - application/xml
        - application/json
      parameters:
        - name: taskId
          in: path
          description: ID of task that needs to be fetched
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/task'
        '400':
          description: Invalid ID supplied
        '404':
          description: task not found
definitions:
  task:
    type: object
    properties:
      id:
        type: integer
        format: int64
      description:
        type: string
    xml:
      name: Task
  user:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      task:
        type: array
        xml:
          name: task
          wrapped: true
        items:
          $ref: '#/definitions/task'
    xml:
      name: User
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
